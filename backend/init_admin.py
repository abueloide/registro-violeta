#!/usr/bin/env python3
"""
Script para crear el usuario administrador inicial de Registro Violeta
Ejecutar despu√©s del deploy para crear el primer usuario
"""

import os
import sys
from datetime import datetime
from pymongo import MongoClient
from passlib.context import CryptContext
from dotenv import load_dotenv

load_dotenv()

# Configuraci√≥n de seguridad
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def get_password_hash(password):
    return pwd_context.hash(password)

def create_admin_user():
    """Crear usuario administrador inicial"""
    
    # Conexi√≥n MongoDB
    MONGO_URL = os.getenv("MONGO_URL")
    if not MONGO_URL:
        print("‚ùå Error: MONGO_URL no configurada")
        return False
    
    try:
        client = MongoClient(MONGO_URL)
        db = client.registro_violeta
        users_collection = db.users
        
        # Verificar conexi√≥n
        client.admin.command('ping')
        print("‚úÖ Conexi√≥n a base de datos exitosa")
        
        # Datos del admin inicial
        admin_email = "admin@registrovioleta.org"
        admin_password = "RegistroVioleta2025!"  # Cambiar despu√©s del primer login
        
        # Verificar si ya existe un admin
        existing_admin = users_collection.find_one({"email": admin_email})
        if existing_admin:
            print(f"‚ö†Ô∏è  El usuario admin {admin_email} ya existe")
            return True
        
        # Crear usuario admin
        admin_user = {
            "email": admin_email,
            "password": get_password_hash(admin_password),
            "nombre": "Admin",
            "apellido": "Sistema",
            "rol": "admin",
            "fundacion": "Registro Violeta",
            "created_at": datetime.utcnow(),
            "active": True
        }
        
        result = users_collection.insert_one(admin_user)
        
        if result.inserted_id:
            print("üéâ Usuario administrador creado exitosamente!")
            print(f"üìß Email: {admin_email}")
            print(f"üîë Contrase√±a: {admin_password}")
            print("\n‚ö†Ô∏è  IMPORTANTE: Cambia la contrase√±a despu√©s del primer login")
            return True
        else:
            print("‚ùå Error al crear el usuario administrador")
            return False
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n a la base de datos: {e}")
        return False

def verify_environment():
    """Verificar que las variables de entorno est√©n configuradas"""
    required_vars = [
        "MONGO_URL",
        "JWT_SECRET_KEY"
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print("‚ùå Variables de entorno faltantes:")
        for var in missing_vars:
            print(f"   - {var}")
        return False
    
    print("‚úÖ Variables de entorno configuradas correctamente")
    return True

if __name__ == "__main__":
    print("üü£ Registro Violeta - Inicializaci√≥n de Usuario Admin")
    print("=" * 50)
    
    # Verificar variables de entorno
    if not verify_environment():
        sys.exit(1)
    
    # Crear usuario admin
    if create_admin_user():
        print("\n‚úÖ Inicializaci√≥n completada exitosamente")
        print("üöÄ Ya puedes iniciar sesi√≥n en la aplicaci√≥n")
    else:
        print("\n‚ùå Error en la inicializaci√≥n")
        sys.exit(1)
